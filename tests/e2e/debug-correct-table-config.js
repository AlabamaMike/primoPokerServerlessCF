// Debug script to test with correct table configuration
async function testCorrectTableConfig() {
  const baseUrl = 'https://primo-poker-server.alabamamike.workers.dev';
  
  console.log('Testing with correct table configuration...');
  
  // Step 1: Register a test user
  const testUser = {
    username: `testuser_${Date.now()}`,
    email: `test_${Date.now()}@example.com`,
    password: 'password123'
  };
  
  console.log('Registering test user:', testUser.username);
  
  try {
    const registerResponse = await fetch(`${baseUrl}/api/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testUser)
    });
    
    const registerData = await registerResponse.json();
    
    if (!registerData.success) {
      console.error('Registration failed:', registerData.error);
      return;
    }
    
    const accessToken = registerData.data.tokens.accessToken;
    console.log('Got access token:', !!accessToken);
    
    // Step 2: Create table with proper configuration based on schema
    const tableConfig = {
      // id will be auto-generated by the handler
      name: 'Debug Test Table',
      gameType: 'texas_holdem', // Matching GameType.TEXAS_HOLDEM
      bettingStructure: 'no_limit', // Matching BettingStructure.NO_LIMIT  
      gameFormat: 'cash', // Matching GameFormat.CASH
      maxPlayers: 6,
      minBuyIn: 20,
      maxBuyIn: 200,
      smallBlind: 1,
      bigBlind: 2,
      ante: 0, // Optional, has default
      timeBank: 30, // Optional, has default
      isPrivate: false, // Optional, has default
    };
    
    console.log('Creating table with correct config:', JSON.stringify(tableConfig, null, 2));
    
    const createResponse = await fetch(`${baseUrl}/api/tables`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`
      },
      body: JSON.stringify(tableConfig)
    });
    
    console.log('Create table status:', createResponse.status);
    const createData = await createResponse.text();
    console.log('Create table response:', createData);
    
    if (createResponse.status === 200) {
      const responseData = JSON.parse(createData);
      if (responseData.success) {
        console.log('SUCCESS! Table created with ID:', responseData.data.tableId);
        
        // Test getting the table
        const getResponse = await fetch(`${baseUrl}/api/tables/${responseData.data.tableId}`);
        console.log('Get table status:', getResponse.status);
        const getTable = await getResponse.text();
        console.log('Get table response:', getTable);
      }
    }
    
  } catch (error) {
    console.error('Test error:', error);
  }
}

testCorrectTableConfig().catch(console.error);