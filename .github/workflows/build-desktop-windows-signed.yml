name: Build Desktop Client - Windows (Signed)

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 0.1.0)'
        required: true
      sign_release:
        description: 'Sign the release'
        type: boolean
        default: true

env:
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

jobs:
  build-windows-signed:
    runs-on: windows-latest
    
    defaults:
      run:
        working-directory: ./apps/poker-desktop

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: pwsh
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $env:GITHUB_OUTPUT
        id: pnpm-cache

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './apps/poker-desktop/src-tauri -> target'

      - name: Install dependencies
        run: |
          cd ../..
          pnpm install --no-frozen-lockfile
          cd apps/poker-desktop

      - name: Update version
        if: github.event.inputs.release_version != ''
        run: |
          # Update version in package.json
          $packageJson = Get-Content package.json | ConvertFrom-Json
          $packageJson.version = "${{ github.event.inputs.release_version }}"
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content package.json
          
          # Update version in Cargo.toml
          $cargoToml = Get-Content src-tauri/Cargo.toml
          $cargoToml = $cargoToml -replace 'version = ".*"', 'version = "${{ github.event.inputs.release_version }}"'
          $cargoToml | Set-Content src-tauri/Cargo.toml
          
          # Update version in tauri.conf.json
          $tauriConf = Get-Content src-tauri/tauri.conf.json | ConvertFrom-Json
          $tauriConf.package.version = "${{ github.event.inputs.release_version }}"
          $tauriConf | ConvertTo-Json -Depth 10 | Set-Content src-tauri/tauri.conf.json

      - name: Build Tauri app
        run: pnpm run tauri build

      - name: Import Windows certificate
        if: github.event.inputs.sign_release == 'true'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          # Create certificate from base64 secret
          $cert = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE)
          $certPath = "cert.pfx"
          [System.IO.File]::WriteAllBytes($certPath, $cert)
          
          # Import certificate to store
          $securePassword = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -AsPlainText -Force
          Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePassword
          
          # Clean up
          Remove-Item $certPath

      - name: Sign Windows executables
        if: github.event.inputs.sign_release == 'true'
        env:
          WINDOWS_CERTIFICATE_THUMBPRINT: ${{ secrets.WINDOWS_CERTIFICATE_THUMBPRINT }}
        run: |
          # Find signtool
          $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
          if (-not (Test-Path $signtool)) {
            $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe"
          }
          
          # Sign main executable
          & $signtool sign /sha1 $env:WINDOWS_CERTIFICATE_THUMBPRINT /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 src-tauri/target/release/primo-poker.exe
          
          # Sign installers
          Get-ChildItem -Path src-tauri/target/release/bundle/nsis/*.exe | ForEach-Object {
            & $signtool sign /sha1 $env:WINDOWS_CERTIFICATE_THUMBPRINT /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 $_.FullName
          }
          
          Get-ChildItem -Path src-tauri/target/release/bundle/msi/*.msi | ForEach-Object {
            & $signtool sign /sha1 $env:WINDOWS_CERTIFICATE_THUMBPRINT /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 $_.FullName
          }

      - name: Generate update signature
        if: github.event.inputs.sign_release == 'true'
        run: |
          # Generate signature for auto-updater
          $installerPath = Get-ChildItem -Path src-tauri/target/release/bundle/nsis/*.exe | Select-Object -First 1
          
          # Create signature using Tauri's signing key
          # This would use the TAURI_PRIVATE_KEY to sign the update
          
          Write-Host "Installer signed and ready for distribution"

      - name: Upload signed Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-signed
          path: |
            apps/poker-desktop/src-tauri/target/release/bundle/nsis/*.exe
            apps/poker-desktop/src-tauri/target/release/bundle/msi/*.msi
          retention-days: 30

      - name: Create GitHub Release
        if: github.event.inputs.sign_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.release_version }}
          name: Primo Poker Desktop v${{ github.event.inputs.release_version }}
          body: |
            ## Primo Poker Desktop v${{ github.event.inputs.release_version }}
            
            ### âœ… Signed Release
            This release has been digitally signed for Windows.
            
            ### Installation
            1. Download the installer
            2. Run the installer (Windows may show a security prompt - click "More info" then "Run anyway")
            3. Follow the installation wizard
            
            ### Auto-Update
            The application will automatically update to new versions.
          files: |
            apps/poker-desktop/src-tauri/target/release/bundle/nsis/*.exe
            apps/poker-desktop/src-tauri/target/release/bundle/msi/*.msi
          draft: true
          prerelease: false

      - name: Upload to S3 for auto-update
        if: github.event.inputs.sign_release == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
        run: |
          # Install AWS CLI if not present
          if (-not (Get-Command aws -ErrorAction SilentlyContinue)) {
            msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi /quiet
            $env:PATH += ";C:\Program Files\Amazon\AWSCLIV2"
          }
          
          # Upload installer
          $installer = Get-ChildItem -Path src-tauri/target/release/bundle/nsis/*.exe | Select-Object -First 1
          aws s3 cp $installer.FullName s3://primo-poker-updates/primo-poker_${{ github.event.inputs.release_version }}_x64-setup.nsis.zip
          
          # Create and upload latest.json
          $latest = @{
            version = "${{ github.event.inputs.release_version }}"
            notes = "New release available"
            pub_date = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
            platforms = @{
              "windows-x86_64" = @{
                signature = ""  # Add signature here
                url = "https://primo-poker-updates.s3.amazonaws.com/primo-poker_${{ github.event.inputs.release_version }}_x64-setup.nsis.zip"
              }
            }
          }
          
          $latest | ConvertTo-Json -Depth 10 | Set-Content latest.json
          aws s3 cp latest.json s3://primo-poker-updates/latest.json