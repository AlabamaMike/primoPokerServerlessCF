name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Install dependencies and build packages
  setup-and-build:
    name: Setup and Build
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      packages-changed: ${{ steps.changes.outputs.packages }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'apps/poker-server/**'
              - 'packages/**'
              - 'package*.json'
              - 'tsconfig*.json'
            frontend:
              - 'apps/poker-frontend/**'
              - 'packages/**'
              - 'package*.json'
              - 'tsconfig*.json'
            packages:
              - 'packages/**'
              - 'package*.json'
              - 'tsconfig*.json'

      - name: Build all packages
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            apps/poker-server/dist
            apps/poker-frontend/out
            apps/poker-frontend/.next
            node_modules
          key: build-${{ github.sha }}
          restore-keys: |
            build-${{ github.ref_name }}

  # Job 2: Run linting and type checking
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            packages/*/dist
            apps/poker-server/dist
            apps/poker-frontend/out
            apps/poker-frontend/.next
            node_modules
          key: build-${{ github.sha }}

      - name: Install dependencies (if cache miss)
        run: npm ci
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript type checking
        run: npm run type-check
        continue-on-error: true

  # Job 3: Run unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v4
        id: cache
        with:
          path: |
            packages/*/dist
            apps/poker-server/dist
            apps/poker-frontend/out
            apps/poker-frontend/.next
            node_modules
          key: build-${{ github.sha }}

      - name: Install dependencies (if cache miss)
        run: npm ci
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Run unit tests
        run: npm run test:ci
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results.xml

  # Job 4: Run E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup-and-build
    if: needs.setup-and-build.outputs.frontend-changed == 'true' || needs.setup-and-build.outputs.backend-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            apps/poker-server/dist
            apps/poker-frontend/out
            apps/poker-frontend/.next
            node_modules
          key: build-${{ github.sha }}

      - name: Install Playwright browsers
        run: cd tests/e2e && npx playwright install --with-deps chromium

      - name: Start backend server
        run: |
          cd apps/poker-server
          nohup npm run dev > backend.log 2>&1 &
          echo $! > backend.pid
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-secret-key-for-ci' }}

      - name: Start frontend server
        run: |
          cd apps/poker-frontend
          nohup npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid

      - name: Wait for servers to start
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8787/api/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        run: cd tests/e2e && npx playwright test --reporter=html
        continue-on-error: true
        timeout-minutes: 10

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            tests/e2e/playwright-report/
            tests/e2e/test-results/

      - name: Stop servers
        if: always()
        run: |
          if [ -f apps/poker-server/backend.pid ]; then
            kill $(cat apps/poker-server/backend.pid) || true
          fi
          if [ -f apps/poker-frontend/frontend.pid ]; then
            kill $(cat apps/poker-frontend/frontend.pid) || true
          fi
          pkill -f "wrangler dev" || true
          pkill -f "next dev" || true

  # Job 5: Deploy backend to Cloudflare Workers
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [setup-and-build, code-quality, unit-tests]
    if: github.ref == 'refs/heads/main' && (needs.setup-and-build.outputs.backend-changed == 'true' || needs.setup-and-build.outputs.packages-changed == 'true')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            apps/poker-server/dist
            apps/poker-frontend/out
            apps/poker-frontend/.next
            node_modules
          key: build-${{ github.sha }}

      - name: Deploy to Cloudflare Workers
        run: npm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Notify deployment success
        run: |
          echo "‚úÖ Backend deployed successfully to Cloudflare Workers"
          echo "üîó Worker URL: https://primo-poker-server.alabamamike.workers.dev"

  # Job 6: Deploy frontend to Cloudflare Pages
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [setup-and-build, code-quality, unit-tests]
    if: github.ref == 'refs/heads/main' && (needs.setup-and-build.outputs.frontend-changed == 'true' || needs.setup-and-build.outputs.packages-changed == 'true')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist
            apps/poker-server/dist
            apps/poker-frontend/out
            apps/poker-frontend/.next
            node_modules
          key: build-${{ github.sha }}

      - name: Deploy to Cloudflare Pages
        run: |
          cd apps/poker-frontend
          npx wrangler pages deploy out --project-name=primo-poker-frontend --compatibility-date=2024-08-01
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Notify deployment success
        run: |
          echo "‚úÖ Frontend deployed successfully to Cloudflare Pages"
          echo "üîó Frontend URL: https://primo-poker-frontend.pages.dev"

  # Job 7: Post-deployment health checks
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Check backend health
        run: |
          echo "üîç Checking backend health..."
          response=$(curl -s -w "%{http_code}" https://primo-poker-server.alabamamike.workers.dev/api/health || echo "000")
          if [[ "$response" =~ 200$ ]]; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ùå Backend health check failed (HTTP $response)"
            exit 1
          fi

      - name: Check frontend availability
        run: |
          echo "üîç Checking frontend availability..."
          response=$(curl -s -w "%{http_code}" -o /dev/null https://primo-poker-frontend.pages.dev || echo "000")
          if [[ "$response" =~ ^(200|301|302)$ ]]; then
            echo "‚úÖ Frontend availability check passed"
          else
            echo "‚ùå Frontend availability check failed (HTTP $response)"
            exit 1
          fi

      - name: Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìä Backend: https://primo-poker-server.alabamamike.workers.dev"
          echo "üéÆ Frontend: https://primo-poker-frontend.pages.dev"